// Importaciones necesarias
parser code {:
  import java_cup.runtime.*;
  import parser.sym;
  import java.io.*;
:};

// Terminales de Decaf
terminal int IDENTIFIER, INTLIT, FLOATLIT, STRINGLIT;
terminal int LPAREN, RPAREN, LBRACE, RBRACE, SEMICOLON;
terminal int PLUS, MINUS, TIMES, DIVIDE;
terminal int IF, ELSE, RETURN, WHILE, VOID;
terminal int INT, FLOAT, CLASS;
terminal int LBRACKET, RBRACKET, COMMA;
terminal int LESS_THAN, GREATER_THAN, EQUALS, NOT_EQUALS;
terminal int LESS_THAN_EQUALS, GREATER_THAN_EQUALS, EQUALS_EQUALS;
terminal int MULTIPLY, FOR, TRUE, FALSE, BOOLEAN; // Nuevos terminales agregados

// No terminales
non terminal Program program;
non terminal DeclList decl_list;
non terminal Declaration declaration;
non terminal VarDecl var_decl;  
non terminal FuncDecl func_decl;  
non terminal ParamList param_list;  
non terminal Param param;  
non terminal Type type;
non terminal StmtList stmt_list;
non terminal Statement statement;
non terminal Expression expression;
non terminal arg_list; 
non terminal arg_list_prime; // Declarado ahora

// No terminal de inicio
start with program;

// Producción del no terminal Program (el símbolo de inicio)
Program ::= decl_list {: System.out.println("Program parsed."); :};

// Lista de declaraciones (DeclList)
DeclList ::= declaration decl_list {: System.out.println("Declaration list parsed."); :}
           | /* vacío */ {: System.out.println("Empty declaration list."); :};

// Declaración de variables
Declaration ::= var_decl SEMICOLON {: System.out.println("Variable declared."); :}
              | func_decl {: System.out.println("Function declared."); :};

// Declaración de variables (con soporte para arreglos)
VarDecl ::= type IDENTIFIER {: System.out.println("Variable declared."); :}
          | type IDENTIFIER LBRACKET INTLIT RBRACKET {: System.out.println("Array variable declared."); :};

// Declaración de funciones
FuncDecl ::= type IDENTIFIER LPAREN param_list RPAREN LBRACE stmt_list RBRACE {: System.out.println("Function definition parsed."); :}
           | VOID IDENTIFIER LPAREN param_list RPAREN LBRACE stmt_list RBRACE {: System.out.println("Void function definition parsed."); :};

// Lista de parámetros
ParamList ::= param param_list {: System.out.println("Parameter list parsed."); :}
            | /* vacío */ {: System.out.println("Empty parameter list."); :};

// Parámetro
Param ::= type IDENTIFIER {: System.out.println("Parameter parsed."); :}
        | type IDENTIFIER LBRACKET RBRACKET {: System.out.println("Array parameter parsed."); :};

// Tipos de datos
Type ::= INT {: System.out.println("Type int."); :}
       | FLOAT {: System.out.println("Type float."); :}
       | STRINGLIT {: System.out.println("Type string."); :}; 

// Lista de sentencias (StmtList)
StmtList ::= statement stmt_list {: System.out.println("Statement list parsed."); :}
           | /* vacío */ {: System.out.println("Empty statement list."); :};

// Definición de una sentencia
Statement ::= expression SEMICOLON {: System.out.println("Expression statement."); :}
            | IF LPAREN expression RPAREN LBRACE stmt_list RBRACE {: System.out.println("If statement parsed."); :}
            | IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE {: System.out.println("If-Else statement parsed."); :}
            | WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE {: System.out.println("While statement parsed."); :}
            | RETURN expression SEMICOLON {: System.out.println("Return statement parsed."); :}
            | LBRACE stmt_list RBRACE {: System.out.println("Block statement parsed."); :}; // Bloque de sentencias

// Definición de expresiones
Expression ::= expression PLUS expression {: System.out.println("Addition expression."); :}
             | expression MINUS expression {: System.out.println("Subtraction expression."); :}
             | expression TIMES expression {: System.out.println("Multiplication expression."); :}
             | expression DIVIDE expression {: System.out.println("Division expression."); :}
             | INTLIT {: System.out.println("Integer literal parsed."); :}
             | FLOATLIT {: System.out.println("Float literal parsed."); :}
             | STRINGLIT {: System.out.println("String literal parsed."); :}
             | IDENTIFIER {: System.out.println("Identifier parsed."); :}
             | LPAREN expression RPAREN {: System.out.println("Parenthesized expression parsed."); :} 
             | IDENTIFIER LPAREN arg_list RPAREN {: System.out.println("Function call parsed."); :}; 

// Lista de argumentos para llamadas a funciones
arg_list ::= expression arg_list_prime {: System.out.println("Argument list parsed."); :}
           | /* vacío */ {: System.out.println("Empty argument list."); :};

// Definición de arg_list_prime
arg_list_prime ::= COMMA expression arg_list_prime {: System.out.println("Argument parsed."); :}
                 | /* vacío */ {: System.out.println("End of argument list."); :};
