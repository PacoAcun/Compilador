stage: parsing
Parsing completed successfully.
AST:
Program: EducationalProgram
  VarDecl: numbers Type: IntType[]
  VarDecl: flags Type: BooleanType[]
  VarDecl: letters Type: CharType[]
  VarDecl: size Type: IntType
  MethodDecl: initialize ReturnType: VoidType
    Parameters:
      Param: arraySize Type: IntType
    Body:
    Block:
      VarDecls:
      Statements:
        AssignStmt:
          Location:
            VarLocation: size
          Operator: =
          Expression:
            VarLocation: arraySize
        AssignStmt:
          Location:
            VarLocation: numbers
          Operator: =
          Expression:
            NewArrayExpr:
              Type:
                Type: int
              Size:
                VarLocation: size
        AssignStmt:
          Location:
            VarLocation: flags
          Operator: =
          Expression:
            NewArrayExpr:
              Type:
                Type: boolean
              Size:
                VarLocation: size
        AssignStmt:
          Location:
            VarLocation: letters
          Operator: =
          Expression:
            NewArrayExpr:
              Type:
                Type: char
              Size:
                VarLocation: size
        ForStmt:
          Initialization:
            VarDeclStmt:
              VarDecl: i Type: IntType
              InitExpression:
                IntLiteral: 0
          Condition:
            BinaryExpr: <
              Left:
                VarLocation: i
              Right:
                VarLocation: size
          Update:
            ExprStmt:
              AssignExpr:
                Location:
                  VarLocation: i
                Operator: =
                Expression:
                  BinaryExpr: +
                    Left:
                      VarLocation: i
                    Right:
                      IntLiteral: 1
          Body:
            Block:
              VarDecls:
              Statements:
                AssignStmt:
                  Location:
                    ArrayLocation: numbers
                      Index:
                        VarLocation: i
                  Operator: =
                  Expression:
                    BinaryExpr: *
                      Left:
                        VarLocation: i
                      Right:
                        IntLiteral: 2
                AssignStmt:
                  Location:
                    ArrayLocation: flags
                      Index:
                        VarLocation: i
                  Operator: =
                  Expression:
                    BinaryExpr: %
                      Left:
                        VarLocation: i
                      Right:
                        BinaryExpr: ==
                          Left:
                            IntLiteral: 2
                          Right:
                            IntLiteral: 0
                IfStmt:
                  Condition:
                    BinaryExpr: %
                      Left:
                        VarLocation: i
                      Right:
                        BinaryExpr: ==
                          Left:
                            IntLiteral: 2
                          Right:
                            IntLiteral: 0
                  Then Block:
                    Block:
                      VarDecls:
                      Statements:
                        AssignStmt:
                          Location:
                            ArrayLocation: letters
                              Index:
                                VarLocation: i
                          Operator: =
                          Expression:
                            CharLiteral: '''
                  Else Block:
                    Block:
                      VarDecls:
                      Statements:
                        AssignStmt:
                          Location:
                            ArrayLocation: letters
                              Index:
                                VarLocation: i
                          Operator: =
                          Expression:
                            CharLiteral: '''
  MethodDecl: calculateSum ReturnType: IntType
    Parameters:
      Param: limit Type: IntType
    Body:
    Block:
      VarDecls:
        VarDecl: sum Type: IntType
      Statements:
        AssignStmt:
          Location:
            VarLocation: sum
          Operator: =
          Expression:
            IntLiteral: 0
        ForStmt:
          Initialization:
            VarDeclStmt:
              VarDecl: i Type: IntType
              InitExpression:
                IntLiteral: 1
          Condition:
            BinaryExpr: <=
              Left:
                VarLocation: i
              Right:
                VarLocation: limit
          Update:
            ExprStmt:
              AssignExpr:
                Location:
                  VarLocation: i
                Operator: =
                Expression:
                  BinaryExpr: +
                    Left:
                      VarLocation: i
                    Right:
                      IntLiteral: 1
          Body:
            Block:
              VarDecls:
              Statements:
                AssignStmt:
                  Location:
                    VarLocation: sum
                  Operator: =
                  Expression:
                    BinaryExpr: +
                      Left:
                        VarLocation: sum
                      Right:
                        VarLocation: i
        ReturnStmt:
          VarLocation: sum
  MethodDecl: isPrime ReturnType: BooleanType
    Parameters:
      Param: number Type: IntType
    Body:
    Block:
      VarDecls:
      Statements:
        IfStmt:
          Condition:
            BinaryExpr: <=
              Left:
                VarLocation: number
              Right:
                IntLiteral: 1
          Then Block:
            Block:
              VarDecls:
              Statements:
                ReturnStmt:
                  BoolLiteral: false
        ForStmt:
          Initialization:
            VarDeclStmt:
              VarDecl: i Type: IntType
              InitExpression:
                IntLiteral: 2
          Condition:
            BinaryExpr: <
              Left:
                VarLocation: i
              Right:
                VarLocation: number
          Update:
            ExprStmt:
              AssignExpr:
                Location:
                  VarLocation: i
                Operator: =
                Expression:
                  BinaryExpr: +
                    Left:
                      VarLocation: i
                    Right:
                      IntLiteral: 1
          Body:
            Block:
              VarDecls:
              Statements:
                IfStmt:
                  Condition:
                    BinaryExpr: %
                      Left:
                        VarLocation: number
                      Right:
                        BinaryExpr: ==
                          Left:
                            VarLocation: i
                          Right:
                            IntLiteral: 0
                  Then Block:
                    Block:
                      VarDecls:
                      Statements:
                        ReturnStmt:
                          BoolLiteral: false
        ReturnStmt:
          BoolLiteral: true
  MethodDecl: displayNumbers ReturnType: VoidType
    Parameters:
    Body:
    Block:
      VarDecls:
      Statements:
        ForStmt:
          Initialization:
            VarDeclStmt:
              VarDecl: i Type: IntType
              InitExpression:
                IntLiteral: 0
          Condition:
            BinaryExpr: <
              Left:
                VarLocation: i
              Right:
                VarLocation: size
          Update:
            ExprStmt:
              AssignExpr:
                Location:
                  VarLocation: i
                Operator: =
                Expression:
                  BinaryExpr: +
                    Left:
                      VarLocation: i
                    Right:
                      IntLiteral: 1
          Body:
            Block:
              VarDecls:
              Statements:
                MethodCallStmt:
                  CalloutCall: "print"
                    Arguments:
                      ExprArg:
                        ArrayLocation: numbers
                          Index:
                            VarLocation: i
                      StringArg: "" ""
        MethodCallStmt:
          CalloutCall: "print"
            Arguments:
              StringArg: ""\n""
  MethodDecl: factorial ReturnType: IntType
    Parameters:
      Param: num Type: IntType
    Body:
    Block:
      VarDecls:
        VarDecl: result Type: IntType
      Statements:
        AssignStmt:
          Location:
            VarLocation: result
          Operator: =
          Expression:
            IntLiteral: 1
        ForStmt:
          Initialization:
            VarDeclStmt:
              VarDecl: i Type: IntType
              InitExpression:
                IntLiteral: 1
          Condition:
            BinaryExpr: <=
              Left:
                VarLocation: i
              Right:
                VarLocation: num
          Update:
            ExprStmt:
              AssignExpr:
                Location:
                  VarLocation: i
                Operator: =
                Expression:
                  BinaryExpr: +
                    Left:
                      VarLocation: i
                    Right:
                      IntLiteral: 1
          Body:
            Block:
              VarDecls:
              Statements:
                AssignStmt:
                  Location:
                    VarLocation: result
                  Operator: =
                  Expression:
                    BinaryExpr: *
                      Left:
                        VarLocation: result
                      Right:
                        VarLocation: i
        ReturnStmt:
          VarLocation: result
  MethodDecl: generateFibonacci ReturnType: VoidType
    Parameters:
      Param: limit Type: IntType
    Body:
    Block:
      VarDecls:
        VarDecl: first Type: IntType
        VarDecl: second Type: IntType
        VarDecl: next Type: IntType
      Statements:
        AssignStmt:
          Location:
            VarLocation: first
          Operator: =
          Expression:
            IntLiteral: 0
        AssignStmt:
          Location:
            VarLocation: second
          Operator: =
          Expression:
            IntLiteral: 1
        ForStmt:
          Initialization:
            VarDeclStmt:
              VarDecl: i Type: IntType
              InitExpression:
                IntLiteral: 0
          Condition:
            BinaryExpr: <
              Left:
                VarLocation: i
              Right:
                VarLocation: limit
          Update:
            ExprStmt:
              AssignExpr:
                Location:
                  VarLocation: i
                Operator: =
                Expression:
                  BinaryExpr: +
                    Left:
                      VarLocation: i
                    Right:
                      IntLiteral: 1
          Body:
            Block:
              VarDecls:
              Statements:
                MethodCallStmt:
                  CalloutCall: "print"
                    Arguments:
                      ExprArg:
                        VarLocation: first
                      StringArg: "" ""
                AssignStmt:
                  Location:
                    VarLocation: next
                  Operator: =
                  Expression:
                    BinaryExpr: +
                      Left:
                        VarLocation: first
                      Right:
                        VarLocation: second
                AssignStmt:
                  Location:
                    VarLocation: first
                  Operator: =
                  Expression:
                    VarLocation: second
                AssignStmt:
                  Location:
                    VarLocation: second
                  Operator: =
                  Expression:
                    VarLocation: next
        MethodCallStmt:
          CalloutCall: "print"
            Arguments:
              StringArg: ""\n""
  MethodDecl: containsValue ReturnType: BooleanType
    Parameters:
      Param: value Type: IntType
    Body:
    Block:
      VarDecls:
      Statements:
        ForStmt:
          Initialization:
            VarDeclStmt:
              VarDecl: i Type: IntType
              InitExpression:
                IntLiteral: 0
          Condition:
            BinaryExpr: <
              Left:
                VarLocation: i
              Right:
                VarLocation: size
          Update:
            ExprStmt:
              AssignExpr:
                Location:
                  VarLocation: i
                Operator: =
                Expression:
                  BinaryExpr: +
                    Left:
                      VarLocation: i
                    Right:
                      IntLiteral: 1
          Body:
            Block:
              VarDecls:
              Statements:
                IfStmt:
                  Condition:
                    BinaryExpr: ==
                      Left:
                        ArrayLocation: numbers
                          Index:
                            VarLocation: i
                      Right:
                        VarLocation: value
                  Then Block:
                    Block:
                      VarDecls:
                      Statements:
                        ReturnStmt:
                          BoolLiteral: true
        ReturnStmt:
          BoolLiteral: false

