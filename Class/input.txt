class ComplexDecafProgram {
    int numbers[];
    int arraySize;  // Añadir una variable para almacenar el tamaño del array
    boolean isActive;
    char initial;

    void initializeArray(int size) {
        int i;
        arraySize = size;  // Almacena el tamaño del array
        numbers = new int[size];
        for (i = 0; i < size; i = i + 1) {
            numbers[i] = i * 2;
        }
    }

    int calculateSum() {
        int sum;
        int i;
        sum = 0;
        for (i = 0; i < arraySize; i = i + 1) {  // Usar arraySize en lugar de numbers.length
            sum = sum + numbers[i];
        }
        return sum;
    }

    void printResults() {
        int i;
        for (i = 0; i < arraySize; i = i + 1) {  // Usar arraySize en lugar de numbers.length
            callout("print", "Number at index ", i, ": ", numbers[i]);
        }
        callout("print", "Sum of all numbers: ", calculateSum());
    }

    void main() {
        initializeArray(10);
        printResults();

        if (calculateSum() > 50) {
            isActive = true;
            callout("print", "Sum is greater than 50, setting isActive to true.");
        } else {
            isActive = false;
            callout("print", "Sum is less than or equal to 50, setting isActive to false.");
        }
    }

    boolean isPrime(int number) {
        int i;
        if (number <= 1) {
            return false;
        }
        for (i = 2; i * i <= number; i = i + 1) {
            if (number % i == 0) {
                return false;
            }
        }
        return true;
    }

    void printPrimeNumbers() {
        int i;
        for (i = 0; i < arraySize; i = i + 1) {  // Usar arraySize en lugar de numbers.length
            if (isPrime(numbers[i])) {
                callout("print", "Prime number: ", numbers[i]);
            }
        }
    }
}
